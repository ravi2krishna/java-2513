27th Oct 2025
=============

    -> Java Fullstack 

        -> Frontend Technologies 

            -> HTML -> CSS -> JS -> TypeScript -> React JS 

        -> Backend Technologies 

            -> Core Java 

            -> Advance Java 

        -> Deployment Tools 

            -> Cloud & DevOps 

    -> Java is Backend Technology 

    -> Popular Applications and their Technology Stack 

        -> https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites

    
    -> What is Java ?
        
        -> Java is a high-level, general-purpose, 
            memory-safe, object-oriented programming language. 

        -> high-level programming language

            -> human readable (abc print system)

        -> low-level programming language

            -> machine readable (010101001) 

            -> 01101010 01100001 01110110 01100001 ==> java 

            -> On Hardware level (embedded systems)
        
        -> general-purpose programming language

            -> Used for various domains 

            -> Java can be used to build 

                -> Desktop Applications 

                -> Web Applications 

                -> Mobile Applications 

                -> etc 
        
        -> domain-specific programming language

            -> Used only for specific use case like SQL 

            -> Structured Query Language is a domain-specific language used to manage data
                i.e working with database systems 


        -> memory-safe programming language

            -> Memory : RAM (Non-Persistent Storage => Temporary Storage => FAST)
            -> Storage : HDD / SSD (Persistent Storage => Permanent Storage => SLOW)

                -> Garbage Collection 

                    -> int studentID = 101;
                    -> String studentName = "Ravi";

                    System.out.println("Welcome "+studentName);

                -> NOTE : As studentID is not being used, java will automatically
                    remove it from memory
        
        -> object-oriented programming language

            -> Object : Object is a real world entity 

            -> Representing real world entities in the programming world 

        -> Programming Paradigms 

            -> A programming paradigm is a relatively high-level way to conceptualize 
                and structure the implementation of a computer program. 

            -> Imperative Approach 

                -> HOW TO DO (Java)

            -> Declarative Approach

                -> WHAT TO DO (SQL)

        -> Compiled Language(Java, C etc) vs Interpreted Languages (Python, Java)

            -> Source Code (Human Readable ) 
                -> Compilation (Convert Human Readable to intermediate form byte code)
                    -> Interpretation (byte code convert to machine/binary code)

            -> Compiled Languages are faster in performance 

            -> Java use cases 
                -> Banking 
                -> Finance 
                -> Large Scale Applications (Enterprise Level Applications)
                
                -> AI / ML / DL (not java, for python) 

28th Oct 2025
=============

    -> Setup Java Environment For Developing Applications

    -> Hardware Spec 

        -> i5 / i3 Processor 

        -> 8 GB RAM 

        -> 500 GB HDD 

    -> Softwares 

        -> Install Java Development Kit (JDK) from oracle 

        -> Install IDE (Integrated Development Environment)

            -> IDE is for writing code 
                -> auto code completion
                -> syntax highlight 
                -> install add-ons / plugins / extensions 

            -> Our IDE : Visual Studio Code (VS Code)

                -> Eclipse
                -> Intellij 
                -> etc 
    
    -> Install Java 

        -> Verify if java is installed or not 
            -> open command prompt and run below command
            -> java --version 

        -> Download From : https://www.oracle.com/java/technologies/downloads/

            -> Install : JDK 25 is the latest Long-Term Support (LTS)
        
            -> After Installing close and re-open command prompt and run below command

                -> java --version
    
    -> Install IDE (Visual Studio Code - vs code)

        -> Verify if vs code is installed or not 
            -> open start menu and search for vs code

        -> Download From : https://code.visualstudio.com/download

        -> After Installing open start menu and search for vs code

    -> English (Language)

        -> Start with Alphabets => Words => Sentences 

    -> Java (Programming Language)    

        -> Start with Keywords => Syntax => Programs (Applications)

    -> How To Write Java Code ? 

        -> Any programming language has Syntax (Rules & Guidelines)

        -> Comparing a programming language with english language

            -> i taking class now today to 8 AM now (incorrect)

            -> i'm taking class today at 8 AM (correct)

    -> Rules 

        -> Write java code in a file with .java as extension

            -> print(good morning)

        -> Compilation 

            -> Convert Human Readable Code To Byte Code and Verify Syntax 

            -> we use a program called "javac" java compiler 

            -> syntax 

                javac Filename with extension 
                javac Demo.java 
                error: class, interface, enum, or record expected

        -> one of the rules in java is we need to start writing code 
        with class, interface, enum 

        -> Every java file we write must have a "class" at least
            class is a keyword here 

                class Demo {
                    print(good morning)
                }

            -> error: invalid method declaration; return type required 

        -> one of the rules is main method is starting point of program in java 

            -> method is a block of code that does some task 

            -> main method syntax 

                public static void main(String [] args) {

                }


                class Demo {
                    public static void main(String [] args) {
                        print(hello)            
                    }
                }

            -> error: ';' expected (; indicates end of statement)

        -> one of the rules is, text data should be enclosed in " "

            class Demo {
                public static void main(String [] args) {
                    print("hello");            
                }
            }

        -> error: cannot find symbol print 

        -> one of the rules is, if you want to print in java use below syntax 

            System.out.println("text");

        -> NOTE : After Successful Compilation, we get byte code in .class file 

            -> javac ==> Demo.java ==> Demo.class 

        -> NOTE : Execution is running byte code using "java" command 

            -> java ClassName 
            -> java Demo
 
        -> Start with this base code 

            package one_basics;
            class Demo {
                public static void main(String [] args) {
                    System.out.println("hello");            
                }
            }

        -> javac ==> Demo.java ==> Demo.class ==> java Demo 

            -> javac one_basics/Demo.java
            -> java one_basics/Demo
        

29th Oct 2025
=============

    -> JVM - JRE - JDK 

    -> JVM - Java Virtual Machine 

        -> Virtual Machine : A logical machine inside a physical machine 

        -> Executes Byte Code 

        -> java one_basics/Demo - invokes jvm to run byte code 

        -> JVM technically converts byte code to machine code 
    
    -> JRE - Java Runtime Environment

        -> Runtime Environment : Providing required infrastructure to run programs / apps 

        -> Providers & Consumers 

        -> Consumers need JRE to run java Applications

        -> NOTE : JRE includes JVM 

    -> JDK - Java Development Kit 

        -> Development Kit : Provides required tools to develop/build programs / apps 

        -> Used by Providers i.e Developers 

        -> NOTE : JDK includes JRE 

    -> Identifiers

        -> Identifiers are "names" given to programs elements for identifying below

            -> Variables
            -> Methods 
            -> Classes 
            -> Interfaces 
            -> etc 

        -> Identifiers Rules 

            -> Can Contain

                -> Letters (a-z, A-Z)
                -> Digits (0-9)
                -> Underscore and Dollar (_ $)
            
            -> Cannot Start with
                
                -> Digits(0-9)
                    2moro (invalid)
            
            -> Can Start with 

                -> Letters (a-z, A-Z)
                -> Underscore (_)
                -> Dollar ($)
            
            -> NOTE : Cannot use keywords as Identifiers 
                     (int, public, class etc)

            -> NOTE : Always follow proper naming conventions for clarity

            -> NOTE : Best practice for naming conventions in java 

                -> Classes / Interfaces -> PascalCase 
                    -> StudentInfo, AdminInfo
                
                -> Variables / Methods -> camelCase 
                    -> studentName, studentInfo()

                -> Constants / Fixed Values -> ALL_CAPS_UNDERSCORE
                    -> INSTITUTE_NAME, PI_VALUE  

                -> Packages -> all lower case 
                    -> com.google.api 

    
    -> Variables 

        -> A variable is a named storage location in memory(RAM) used to hold/store data

        -> Variables allows you to 

            -> Assign (Store Data)

            -> Retrieve Data 

            -> Manipulate Data (If required)

        -> In java we can ignore a piece of code using comments 
            represented using //

        -> Syntax Rules

            datatype variable_name = value;
        
        -> concatenation 

            -> In Java, string concatenation refers to the process of joining two or more strings
                Using the + operator

        -> Manipulate Data (If required), you need to know about "Operators"     

    
30th Oct 2025
=============    

    -> DataTypes 

        -> Data type defines, what kind of data a variable can hold 
    
    -> Classification Of Data Types 

        -> Primitive Data Types 

            -> Java has 8 Primitive DataTypes

            -> byte : stores integers from -127 to 127 [ Size : 1 Byte]
            -> short : stores integers from -32768 to 32767 [ Size : 2 Bytes]
            -> int : stores integers from -2^31 to 2^31 -1 [ Size : 4 Bytes]
            -> long : stores huge integers [ Size : 8 Bytes]
                -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
            
            -> float : stores decimal numbers [Size : 4 Bytes] [1.0,2.5,3.1 etc]
            -> double : stores decimal numbers [Size : 8 Bytes] [1.10200202 etc]

            -> char : stores single character [ Size : 2 Bytes] ['$','a','0']
            -> boolean : stores either true or false [ Size : 1 Byte]

        -> Complex Data Types 

            -> Strings 
            -> Arrays 
            -> Custom Classes you create 

    -> Manipulate Data Using Operators

    -> Operators 

        -> Operators are "symbols" used to perform operations on variables and their Values

        -> Operator Types 

        -> Arithmetic Operators 

            -> Used for mathematical calculations 

                -> + - * / % 

        -> Compound Assignment Operator

            -> Assignment Operator is = 
            -> Combing Assignment Operator with Arithmetic Operators 
            -> Used to short hand / concise code 

            -> x = 10
            -> x = x + 5 or x += 5
            -> x = x * 5 or x *= 5 
        
        -> Increment / Decrement Operator 

            -> Increment increase value  ++
            -> Decrement decrease value  --

            
31st Oct 2025
=============

    -> Comparison Operators (Relational)

        -> Used to Comparing values, results in boolean value i.e true/false 

        -> == (equality check)
        -> != (not equal check)
        -> > 
        -> <
        -> >= 
        -> <= 

    -> Logical Operators 

        -> Used to combine multiple condition checks, results in boolean value i.e true/false 

        -> && (and) : returns true, only when both conditions are true, otherwise false
        -> || (or) : returns true, when one of the conditions is true, when both are false then only its false
        -> ! (not) : negates the result, if true then false, if false then true

                X       Y         X && Y    X || Y    ! X    ! Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T     


    -> Bitwise Operators 

        -> Used for low level programming (010010101)

        -> & : when both bits are one, then the result is 1

            1 1 - 1
            1 0 - 0
            0 1 - 0
            0 0 - 0

        -> | : when either one of the bit is 1, then result is 1

            1 1 - 1
            1 0 - 1
            0 1 - 1
            0 0 - 0

        -> etc 


    -> Control Structures / Statements

        -> Control statements in Java are fundamental constructs that manage 
        the "flow of program execution". 
        
        -> They allow for decision-making, repetitive tasks, and altering the 
        normal sequential execution of statements. 
        
        -> Control statements are categorized into three main types

            -> Conditional Statements (Decision Making Statements)

            -> Looping Statements (Iteration Statements)

            -> Branching Statements (Jump Statements)

        -> Conditional Statements (Decision Making Statements)

            -> if statement: Executes a "block of code" only if a 
                specified condition evaluates to true.

                -> syntax

                    if (condition) {
                        // code to be executed if condition is true
                    }

            -> if-else statement: Executes one block of code if the condition is true, 
                and a different block if the condition is false. 

                -> syntax

                    if (condition) {
                        // code to be executed if condition is true
                    } else {
                        // code if condition is false
                    }
            
            -> The ternary operator in Java, also known as the conditional operator, 
            is a shorthand way to write simple if-else statements, particularly when assigning 
            a value based on a condition.

                -> syntax

                    result = (condition) ? value_if_true : value_if_false;
